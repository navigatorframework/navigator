// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Navigator.Extensions.Store.Context;

#nullable disable

namespace Sample.Store.Migrations
{
    [DbContext(typeof(NavigatorDbContext))]
    [Migration("20231009172135_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Navigator.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasBotInAttachmentMenu")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Navigator.Extensions.Store.Entities.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FirstInteractionAt")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsForum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Navigator.Extensions.Store.Entities.Conversation", b =>
                {
                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FirstInteractionAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Navigator.Extensions.Store.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FirstInteractionAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasBotInAttachmentMenu")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Navigator.Entities.Bot", b =>
                {
                    b.HasBaseType("Navigator.Entities.User");

                    b.Property<bool?>("CanJoinGroups")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CanReadAllGroupMessages")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("SupportsInlineQueries")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Bot");
                });

            modelBuilder.Entity("Navigator.Extensions.Store.Entities.Bot", b =>
                {
                    b.HasBaseType("Navigator.Extensions.Store.Entities.User");

                    b.HasDiscriminator().HasValue("Bot");
                });

            modelBuilder.Entity("Navigator.Extensions.Store.Entities.Conversation", b =>
                {
                    b.HasOne("Navigator.Extensions.Store.Entities.Chat", "Chat")
                        .WithMany("Conversations")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Navigator.Extensions.Store.Entities.User", "User")
                        .WithMany("Conversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Navigator.Extensions.Store.Entities.Chat", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("Navigator.Extensions.Store.Entities.User", b =>
                {
                    b.Navigation("Conversations");
                });
#pragma warning restore 612, 618
        }
    }
}
